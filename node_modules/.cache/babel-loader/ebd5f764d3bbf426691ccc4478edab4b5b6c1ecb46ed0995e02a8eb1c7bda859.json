{"ast":null,"code":"var _jsxFileName = \"C:\\\\lokesh\\\\habit\\\\habit-tracker\\\\src\\\\components\\\\HabitHeatmap.js\";\nimport React from 'react';\nimport { HeatmapGrid } from 'react-heatmap-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HabitHeatmap = ({\n  data,\n  dates,\n  habitLabels\n}) => {\n  // Basic styling for the heatmap container\n  const containerStyle = {\n    width: '100%',\n    overflowX: 'auto',\n    // Add horizontal scroll if needed\n    paddingBottom: '10px' // Add some space for the scrollbar\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4 text-center\",\n      children: \"Habit Completion Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: containerStyle,\n      children: data && data.length > 0 && dates && dates.length > 0 && habitLabels && habitLabels.length > 0 ? /*#__PURE__*/_jsxDEV(HeatmapGrid, {\n        data: data,\n        xLabels: dates,\n        yLabels: habitLabels\n        // Customize colors and other appearance options here\n        ,\n        cellRender: (x, y, value) => {\n          const habitName = habitLabels[y]; // Get the habit name using the y-coordinate\n          const date = dates[x]; // Get the date using the x-coordinate\n          const completionStatus = value === 1 ? 'Completed' : 'Not Completed';\n          const tooltipText = `${habitName} on ${date}: ${completionStatus}`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            title: tooltipText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }, this);\n        },\n        cellStyle: (x, y, value) => ({\n          background: value === 1 ? '#4CAF50' : '#EEEEEE',\n          // Green for completed, light gray for not completed\n          // Example with a slightly different completed color:\n          // background: value === 1 ? '#66BB6A' : '#EEEEEE',\n          // Example with more distinction:\n          // background: value === 1 ? '#2E7D32' : '#E0E0E0',\n          borderRadius: '4px'\n          // Example border:\n          // border: '1px solid #CCCCCC',\n        }),\n        cellHeight: \"25px\" // Adjust cell height as needed\n        ,\n        xLabelsStyle: () => ({\n          fontSize: '.65rem',\n          textTransform: 'uppercase'\n        }),\n        yLabelsStyle: () => ({\n          fontSize: '.8rem'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"Add some habits and mark them as done to see the heatmap.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = HabitHeatmap;\nexport default HabitHeatmap;\nvar _c;\n$RefreshReg$(_c, \"HabitHeatmap\");","map":{"version":3,"names":["React","HeatmapGrid","jsxDEV","_jsxDEV","HabitHeatmap","data","dates","habitLabels","containerStyle","width","overflowX","paddingBottom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","length","xLabels","yLabels","cellRender","x","y","value","habitName","date","completionStatus","tooltipText","title","cellStyle","background","borderRadius","cellHeight","xLabelsStyle","fontSize","textTransform","yLabelsStyle","_c","$RefreshReg$"],"sources":["C:/lokesh/habit/habit-tracker/src/components/HabitHeatmap.js"],"sourcesContent":["import React from 'react';\nimport { HeatmapGrid } from 'react-heatmap-grid';\n\nconst HabitHeatmap = ({ data, dates, habitLabels }) => {\n  // Basic styling for the heatmap container\n  const containerStyle = {\n    width: '100%',\n    overflowX: 'auto', // Add horizontal scroll if needed\n    paddingBottom: '10px', // Add some space for the scrollbar\n  };\n\n  return (\n    <div className=\"mt-8\">\n      <h2 className=\"text-xl font-bold mb-4 text-center\">Habit Completion Heatmap</h2>\n      <div style={containerStyle}>\n        {data && data.length > 0 && dates && dates.length > 0 && habitLabels && habitLabels.length > 0 ? (\n          <HeatmapGrid\n            data={data}\n            xLabels={dates}\n            yLabels={habitLabels}\n            // Customize colors and other appearance options here\n            cellRender={(x, y, value) => {\n              const habitName = habitLabels[y]; // Get the habit name using the y-coordinate\n              const date = dates[x]; // Get the date using the x-coordinate\n              const completionStatus = value === 1 ? 'Completed' : 'Not Completed';\n              const tooltipText = `${habitName} on ${date}: ${completionStatus}`;\n\n              return (\n                <div title={tooltipText}>\n                  {/* You can optionally render something inside the cell, like a checkmark or an empty circle */}\n                  {/* {value === 1 ? 'âœ“' : ''} */}\n                </div>\n              );\n            }}\n            cellStyle={(x, y, value) => ({\n              background: value === 1 ? '#4CAF50' : '#EEEEEE', // Green for completed, light gray for not completed\n              // Example with a slightly different completed color:\n              // background: value === 1 ? '#66BB6A' : '#EEEEEE',\n              // Example with more distinction:\n              // background: value === 1 ? '#2E7D32' : '#E0E0E0',\n              borderRadius: '4px',\n              // Example border:\n              // border: '1px solid #CCCCCC',\n            })}\n            cellHeight=\"25px\" // Adjust cell height as needed\n            xLabelsStyle={() => ({ fontSize: '.65rem', textTransform: 'uppercase' })}\n            yLabelsStyle={() => ({ fontSize: '.8rem' })}\n          />\n        ) : (\n          <p className=\"text-gray-500 text-center\">Add some habits and mark them as done to see the heatmap.</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HabitHeatmap;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAY,CAAC,KAAK;EACrD;EACA,MAAMC,cAAc,GAAG;IACrBC,KAAK,EAAE,MAAM;IACbC,SAAS,EAAE,MAAM;IAAE;IACnBC,aAAa,EAAE,MAAM,CAAE;EACzB,CAAC;EAED,oBACER,OAAA;IAAKS,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBV,OAAA;MAAIS,SAAS,EAAC,oCAAoC;MAAAC,QAAA,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChFd,OAAA;MAAKe,KAAK,EAAEV,cAAe;MAAAK,QAAA,EACxBR,IAAI,IAAIA,IAAI,CAACc,MAAM,GAAG,CAAC,IAAIb,KAAK,IAAIA,KAAK,CAACa,MAAM,GAAG,CAAC,IAAIZ,WAAW,IAAIA,WAAW,CAACY,MAAM,GAAG,CAAC,gBAC5FhB,OAAA,CAACF,WAAW;QACVI,IAAI,EAAEA,IAAK;QACXe,OAAO,EAAEd,KAAM;QACfe,OAAO,EAAEd;QACT;QAAA;QACAe,UAAU,EAAEA,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,KAAK;UAC3B,MAAMC,SAAS,GAAGnB,WAAW,CAACiB,CAAC,CAAC,CAAC,CAAC;UAClC,MAAMG,IAAI,GAAGrB,KAAK,CAACiB,CAAC,CAAC,CAAC,CAAC;UACvB,MAAMK,gBAAgB,GAAGH,KAAK,KAAK,CAAC,GAAG,WAAW,GAAG,eAAe;UACpE,MAAMI,WAAW,GAAG,GAAGH,SAAS,OAAOC,IAAI,KAAKC,gBAAgB,EAAE;UAElE,oBACEzB,OAAA;YAAK2B,KAAK,EAAED;UAAY;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGnB,CAAC;QAEV,CAAE;QACFc,SAAS,EAAEA,CAACR,CAAC,EAAEC,CAAC,EAAEC,KAAK,MAAM;UAC3BO,UAAU,EAAEP,KAAK,KAAK,CAAC,GAAG,SAAS,GAAG,SAAS;UAAE;UACjD;UACA;UACA;UACA;UACAQ,YAAY,EAAE;UACd;UACA;QACF,CAAC,CAAE;QACHC,UAAU,EAAC,MAAM,CAAC;QAAA;QAClBC,YAAY,EAAEA,CAAA,MAAO;UAAEC,QAAQ,EAAE,QAAQ;UAAEC,aAAa,EAAE;QAAY,CAAC,CAAE;QACzEC,YAAY,EAAEA,CAAA,MAAO;UAAEF,QAAQ,EAAE;QAAQ,CAAC;MAAE;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,gBAEFd,OAAA;QAAGS,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EAAC;MAAyD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACtG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACsB,EAAA,GAnDInC,YAAY;AAqDlB,eAAeA,YAAY;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}